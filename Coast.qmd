---
title: "Coast"
format: html
---

```{r}

# libraries
library(tidyverse)
library(readxl)
library(nbaR)
library(extrafont) # this has tools for embedding fonts in vector graphics which 
# is required by the design team of the booklet.

loadfonts(device = "pdf") # this is required as device = cairo_pdf is not compatible with CorelDraw
```

Data import terrestrial, marine and estuary data : per type data for RLE and EPL with extent, and import a coastal link file to identify coastal ecosystems in marine and terrestrial realms (all estuaries are coastal).

```{r}
# Import data for terrestial marine and estuarine realm, both count and extent per RLE and EPL category.

ter_results <- read.csv("C:/Rdata/RLE_terr/outputs/ter_results_for_integration.csv") %>% mutate(RLE = factor(RLE, levels = c("CR", "EN", "VU", "LC"), ordered = TRUE), EPL = factor(EPL, levels = c("WP", "MP", "PP", "NP"), ordered = TRUE)) 

est_results <- read.csv("C:/Rdata/RLE_est/outputs/est_results_for_integration.csv")  %>% mutate(RLE = factor(RLE, levels = c("CR", "EN", "VU", "LC"), ordered = TRUE), EPL = factor(EPL, levels = c("WP", "MP", "PP", "NP"), ordered = TRUE)) 

mar_results <- read.csv("C:/Users/skownoa/Dropbox/NBAwork/Marine/mar_results_for_integration.csv")  %>% mutate(RLE = factor(RLE, levels = c("CR", "EN", "VU", "NT", "LC"), ordered = TRUE), EPL = factor(EPL, levels = c("WP", "MP", "PP", "NP"), ordered = TRUE)) 

# coastal link - this file is used to ID ter types that are coastal 
coastalink <- read.csv("C:/Users/skownoa/Dropbox/NBAwork/Coast/coast-e-ecosystem_types.csv")

 
```

Terrestrial data clean up: link to coastal list to subset to ter coastal types, then remove non ter types, and calculate count of types per class and extent of types per class.

RLE count for coastal types

```{r}
# Clean up terrestrial data and link to coastal list and calculate count and extent sumamries for RLE and EPL 

# RLE ter COUNT
rle_ter_c_count <-  ter_results %>%
  right_join(coastalink, by = c( "type" ="T_MAPCODE" )) %>% #RJ to select only ter typs in coastal list
  select(type, RLE) %>%
  filter(!is.na(RLE)) %>% # use only ter part of list (drop mar and est) 
  count(RLE) %>%
  pivot_wider(names_from = RLE, 
              values_from = n, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
  mutate(realm = "ter")

# RLE mar COUNT
rle_mar_c_count <-  mar_results %>%
  right_join(coastalink, by =  "type") %>% #RJ to select only ter typs in coastal list
  select(type, RLE) %>%
  filter(!is.na(RLE)) %>% # use only ter part of list (drop mar and est) 
  count(RLE) %>%
  pivot_wider(names_from = RLE, 
              values_from = n, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
  mutate(realm = "mar") %>% mutate (LC = NT+LC) %>% select(-NT)

# RLE est count from Realm results workflow = est_rle_count

################ BIND results for coastal rle count
coa_rle_count <- bind_rows(est_rle_count, rle_mar_c_count, rle_ter_c_count) %>%
  bind_rows(
    summarise(., across(where(is.numeric), ~sum(.x, na.rm = TRUE)) %>%
                mutate(realm = "coa"))) %>%   filter(realm =="coa")

```

RLE extent for coastal types

```{r}

# RLE ter EXT
rle_ter_c_ext <-  ter_results %>%
  right_join(coastalink, by = c( "type" ="T_MAPCODE" )) %>% #RJ to select only ter typs in coastal list
  select(type, RLE, extent) %>%
  filter(!is.na(RLE)) %>% # use only ter part of list (drop mar and est) 
  group_by(RLE) %>%
  summarise(extent = sum(extent), .groups = "drop" ) %>%
  pivot_wider(names_from = RLE, values_from = extent, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
  mutate(realm = "ter")

# RLE mar ext
rle_mar_c_ext <-  mar_results %>%
  right_join(coastalink, by =  "type") %>% 
  select(type, RLE, extent) %>%
  filter(!is.na(RLE)) %>% # use only ter part of list (drop mar and est) 
  group_by(RLE) %>%
  summarise(extent = sum(extent), .groups = "drop" ) %>%
  pivot_wider(names_from = RLE, values_from = extent, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
  mutate(realm = "mar") %>% mutate (LC = NT+LC) %>% select(-NT)

# RLE est ext from Realm results workflow = est_rle_ext

################ BIND results for coastal rle ext
coa_rle_ext <- bind_rows(est_rle_ext, rle_mar_c_ext, rle_ter_c_ext) %>%
  bind_rows(
    summarise(., across(where(is.numeric), ~sum(.x, na.rm = TRUE)) %>%
                mutate(realm = "coa"))) %>%   filter(realm =="coa")
```

EPL count per realm

```{r}

# EPL ter COUNT
epl_ter_c_count <-  ter_results %>%
  right_join(coastalink, by = c( "type" ="T_MAPCODE" )) %>% #RJ to select only ter typs in coastal list
  select(type, EPL) %>%
  filter(!is.na(EPL)) %>% # use only ter part of list (drop mar and est) 
  count(EPL) %>%
  pivot_wider(names_from = EPL, 
              values_from = n, values_fill = 0) %>%
     mutate(realm = "ter")

# EPL mar COUNT
epl_mar_c_count <-  mar_results %>%
  right_join(coastalink, by =  "type") %>% #RJ to select only ter typs in coastal list
  select(type, EPL) %>%
  filter(!is.na(EPL)) %>% # use only ter part of list (drop mar and est) 
  count(EPL) %>%
  pivot_wider(names_from = EPL, 
              values_from = n, values_fill = 0) %>%
     mutate(realm = "mar")

# EPL est count from Realm results workflow = est_rle_count

################ BIND results for coastal epl count
coa_epl_count <- bind_rows(est_epl_count, epl_mar_c_count, epl_ter_c_count) %>%
  bind_rows(
    summarise(., across(where(is.numeric), ~sum(.x, na.rm = TRUE)) %>%
                mutate(realm = "coa"))) %>%   filter(realm =="coa")
```

EPL ext per realm

```{r}

# EPL ter EXT
epl_ter_c_ext <-  ter_results %>%
  right_join(coastalink, by = c( "type" ="T_MAPCODE" )) %>% #RJ to select only ter typs in coastal list
  select(type, EPL, extent) %>%
  filter(!is.na(EPL)) %>% # use only ter part of list (drop mar and est) 
  group_by(EPL) %>%
  summarise(extent = sum(extent), .groups = "drop" ) %>%
  pivot_wider(names_from = EPL, values_from = extent, values_fill = 0) %>%
  mutate(realm = "ter")

# EPL mar ext
epl_mar_c_ext <-  mar_results %>%
  right_join(coastalink, by =  "type") %>% 
  select(type, EPL, extent) %>%
  filter(!is.na(EPL)) %>% # use only ter part of list (drop mar and est) 
  group_by(EPL) %>%
  summarise(extent = sum(extent), .groups = "drop" ) %>%
  pivot_wider(names_from = EPL, values_from = extent, values_fill = 0) %>%
     mutate(realm = "mar") 

# EPL est ext from Realm results workflow = est_epl_ext

################ BIND results for coastal epl ext
coa_epl_ext <- bind_rows(est_epl_ext, epl_mar_c_ext, epl_ter_c_ext) %>%
  bind_rows(
    summarise(., across(where(is.numeric), ~sum(.x, na.rm = TRUE)) %>%
                mutate(realm = "coa"))) %>%   filter(realm =="coa")
```

```{r}
# clean up estuarine to match 
epl_est_count <- epl_est_type %>%
  count(full_ecosystem_type_name, EPL24_model) %>%
  pivot_wider(
    names_from = EPL24_model,
    values_from = n,
    values_fill = 0
  ) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)) %>%
      mutate(full_ecosystem_type_name = "Total")
  ) %>%
  mutate(realm = "est") %>%
  rename(zone = full_ecosystem_type_name) %>%
  select(zone, WP, MP, PP, NP, realm)

epl_est_ext <- epl_est_type %>%
    pivot_wider(
    names_from = EPL24_model,
    values_from = tot_ext18,
    values_fill = 0
  ) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)/1e6) %>%
      mutate(full_ecosystem_type_name = "Total")
  ) %>%
  mutate(realm = "est") %>%
  rename(zone = full_ecosystem_type_name) %>%
  select(zone, WP, MP, PP, NP, realm)

#############################################################


rle_est_count <- rle_est_type %>%
  count(full_ecosystem_type_name, RLE24) %>%
  pivot_wider(
    names_from = RLE24,
    values_from = n,
    values_fill = 0
  ) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)) %>%
      mutate(full_ecosystem_type_name = "Total")
  ) %>%
  mutate(realm = "est") %>%
  rename(zone = full_ecosystem_type_name)%>%
  select(zone, CR, EN, VU, LC, realm)

rle_est_ext <- rle_est_type %>%
    pivot_wider(
    names_from = RLE24,
    values_from = tot_ext24,
    values_fill = 0
  ) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)/ 1e6) %>%
      mutate(full_ecosystem_type_name = "Total")
  ) %>%
  mutate(realm = "est") %>%
  rename(zone = full_ecosystem_type_name) %>%
  select(zone, CR, EN, VU, LC, realm)


```

```{r}
# Combine the coastal data 
# BIND tables together for RLE 

rle_coast_count <- bind_rows(rle_ter_c_type_count, rle_est_count, rle_mar_c_type_count)
rle_coast_count <-  rle_coast_count %>%
  filter(zone == "Total") %>% 
  relocate(realm, .before = zone) %>% 
  select(-zone) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)) %>%
      mutate(realm = "coa")
  ) %>% 
  rowwise() %>%
mutate(Total = sum(CR, EN, VU, LC))

####### PROBLEMS as Tash send wrong data - it is named coastal but it same as mar ext rle)

rle_coast_ext <- bind_rows(rle_ter_c_type_ext, rle_est_ext, rle_mar_c_type_ext) 
rle_coast_ext <-  rle_coast_ext %>%
  filter(zone == "Total") %>% 
  relocate(realm, .before = zone) %>% 
  select(-zone) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)) %>%
      mutate(realm = "coa")
  ) %>% 
  rowwise() %>%
mutate(Total = sum(CR, EN, VU, LC))

# EPL BIND  together data from est mar and ter


epl_coast_count <- bind_rows(epl_ter_c_type_count, epl_est_count, epl_mar_c_type_count)
epl_coast_count <-  epl_coast_count %>%
  filter(zone == "Total") %>% 
  relocate(realm, .before = zone) %>% 
  select(-zone) %>%
  bind_rows(
    summarise(., across(where(is.numeric), sum, na.rm = TRUE)) %>%
      mutate(realm = "coa")
  ) %>% 
  rowwise() %>%
mutate(Total = sum(WP, MP, PP, NP))

####### PROBLEMS as Tash send wrong data - it is named coastal but it same as mar ext epl)
epl_coast_ext <- bind_rows(epl_ter_c_type_ext, epl_est_ext, epl_mar_c_type_ext)


```
